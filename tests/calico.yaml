---
# Source: calico/templates/calico-kube-controllers.yaml
# This manifest creates a Pod Disruption Budget for Controller to allow K8s Cluster Autoscaler to evict

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
---
# Source: calico/templates/calico-kube-controllers.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system
---
# Source: calico/templates/calico-node.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcWZCU3JkOHpIQlprMVRlU3U5eGpaZUJqTUdEMW5nVVZyZ25rWmRHb0pwMDA0aFRNCnJuWTAwK3JlZkJXaDVpckhZc0VrYi9BWlZvSUVZT3gvZEZ0ejlMWGtzRTFhVFpOMDhZaERxUGMrT0VKZUF4T2QKaVdtd09UaVc1OVlpbHZZUmFDdGtxSkphZmpMQUd0WEUzd01tK2w5RmRsc3dGWFQzOW54dmxzL0pVeTk2KzdoMApOcGZRTHJiWkZsaG4yL3U3cFc1M2c1eURxTW1XbGFBTTV0eUdTcjQxOFVNeE4wbnRBZzJmWko0Uzhxbk96VjdWClFjNkRwREZ0aU1LYzlUZklWaHlIM0J2bkdPS3VhelVMaHk3ZFR2Qm1RaTZ3cWZrWUtlSTBaRFhhNGFBelJ0MHQKSnFVVUphVWdMMitBb3JxTmo2UnBIUzlvT21sMWFKR3RIQUFEdHdJREFRQUJBb0lCQUNab1pvZGRsdE9XVEJ2VQpmNWx0Nmhrd2FicVpiMm5UaEY3ZFpYMk5zUTlwSUhhb2RNcEpkUThnV2tCNU15b3VLUG9zNU90WHZLSk1xR2l2Cml1N2xiSU8yU0lXQU5oU3FheGZiMEU3ejhtQU12K3E2R0RUaWFpM0VtSGExY3dQamdYT2x1dzVPWloxNEl1cnQKdlowWnZVbUJGdFgxTGh6clhzK2F1QzNCc0tMWURnQWlNQnlXNmdDQUx6WjFudUFmNnE5UHZIaW5YcWh3YUlwSApQQjlNYVc0RlFGYjhOMFZvQ29OcEpRMm96K0p3QVZ4WmQ1ZC9SY0kxVERqZlEvVnNZUHJydmZPWFl4N004d0c5CnRTZDRTNXMrSmdBM2twVVM0Yms1U0VzT1cwMmc1dlREbUluSlRnOUpydmFvakRuODBlbkNMc0M5ZklLRFNzQU0KaEMyWFNRRUNnWUVBeVVpamVtTGRwN1hyZENBdUpDMEU3RHUrbFAyemtYOXA5UklPTFFQcVp3OFh0N1g5WmNTTwpXNXBLWUVJMXFnNG5vUllrMTJOWW5YZitGUDZjVG53eUJmWDVhV1Z3VWtGeDNUZ2lsSTlsaDVjbU16SXJqQlZTClh2aHE4M2drWDMwWEUrRWhEVERjbTVsUGRsNlZ0cnIrM2syVFdEMzFHQWszR3hSREdiWjFqRmNDZ1lFQTJDSmkKRGhxc3M1UHRFVElXMEoyaDcyOVFhbTZkWlRQVUxDWUpYVUFQRTRIcGxLQm5vWWFFUTB0YTJQbnV4eUpRd0hxdgpxRVAzdFoyWVlHSWhZanVnWGxvY01NdWNtZzdRckhGOHJCeG01N3d2SE1MRGJFSzBCSXZvdm5aSjdFbVI5aXBPCkxqOHJyZnBVY3Z6Q084cjBwdXJqWEMwMHNSM3Bkdlk2dXdycXA2RUNnWUJodWNXOVp3RHRLMU1zNTI3Zm00ZjMKVmk1NjBnNThCdHVmNCt0RUNkR2x4ZHNqRTlYNnNncllDTG94c0JPMEEvbFRxWmVyaDQxL3JzR0syZTl6MzdLOQoyQ1lHK1B3bXc2V1AzWEJVcHFhSnhXWURsMGt6VXlyUjkxU2Q3dWZpQUs3U3RReENCa1lsdWJLdDZ0QlBqc3l0CmpBYU00ay84SW9WQnZYMnluemJGTXdLQmdCZ3VJSkk3WWI3bGVjeEdzazY4ay9WWm1zR05ob1pmK2dqR2FKM0sKSU9XcHp4d1ZwZ0pvTGp2cEhrelFDV3ExNkJyZ251NVFURkpCUTE3bEc1OEYxTGM1bFpYUDhjRTZqeFg3ekZybApBbzVDZTNMWVIwekJXYXA0akoxaVZucmM4RHQrR0NrTVlES2lvdmdLVnlDaFlDV2NlYnRDUTNiZFJkVk5UdHpHCkorS0JBb0dCQUpQTHBwUC9sTWthYTRaSzdsNmp5MFZZbVZLRVN2bjNoNkJyNVZhQzIrN0RDSGVqTWNDTkhSSlgKbzkxNzZ1MW5pd0d5ckoyM3lSNFQ1YXFSRUw4bHZDS2l4ZkJGTFVIVnV3MGg0aFlQUWZadEtGKzYrQU9FYlR0Ngp6M3BVWUwvSmVVbFlYaDBjbVJhcnl1cHZ4dzZxVWNZMzhubWV0MmY1ZjZWeEJCemRjZG1JCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVFakNDQXZxZ0F3SUJBZ0lVQWV4TkJQYzhPRmVOaW9HdEpFMTVTTjVKdkdZd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FURUxNQWtHQTFVRUJoTUNTVTR4RHpBTkJnTlZCQWdUQmt0bGNtRnNZVEVPTUF3R0ExVUVCeE1GUzI5agphR2t4RXpBUkJnTlZCQW9UQ2t0MVltVnlibVYwWlhNeER6QU5CZ05WQkFzVEJsSnBibTk1Y3pFVE1CRUdBMVVFCkF4TUtTM1ZpWlhKdVpYUmxjekFlRncweU16QXpNamt3T1RVMk1EQmFGdzB5TkRBek1qZ3dPVFUyTURCYU1Ha3gKQ3pBSkJnTlZCQVlUQWtsT01ROHdEUVlEVlFRSUV3WkxaWEpoYkdFeERqQU1CZ05WQkFjVEJVdHZZMmhwTVJNdwpFUVlEVlFRS0V3cExkV0psY201bGRHVnpNUTh3RFFZRFZRUUxFd1pTYVc1dmVYTXhFekFSQmdOVkJBTVRDbXQxClltVnlibVYwWlhNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNwOEZLdDN6TWMKRm1UVk41SzczR05sNEdNd1lQV2VCUld1Q2VSbDBhZ21uVFRpRk15dWRqVFQ2dDU4RmFIbUtzZGl3U1J2OEJsVwpnZ1JnN0g5MFczUDB0ZVN3VFZwTmszVHhpRU9vOXo0NFFsNERFNTJKYWJBNU9KYm4xaUtXOWhGb0syU29rbHArCk1zQWExY1RmQXliNlgwVjJXekFWZFBmMmZHK1d6OGxUTDNyN3VIUTJsOUF1dHRrV1dHZmIrN3VsYm5lRG5JT28KeVphVm9Bem0zSVpLdmpYeFF6RTNTZTBDRFo5a25oTHlxYzdOWHRWQnpvT2tNVzJJd3B6MU44aFdISWZjRytjWQo0cTVyTlF1SEx0MU84R1pDTHJDcCtSZ3A0alJrTmRyaG9ETkczUzBtcFJRbHBTQXZiNENpdW8yUHBHa2RMMmc2CmFYVm9rYTBjQUFPM0FnTUJBQUdqZ2JFd2dhNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlJpZHJGYQo5VllBWVYvQUVFazRwT3pOdVpQRWl6QWZCZ05WSFNNRUdEQVdnQlRvNTdrUFZXVTZKd25pQW9tQWhOSkJxUzNXCm5UQXZCZ05WSFJFRUtEQW1naEpyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFNIQkFvZ0FBR0hCTUNvQUplSEJIOEEKQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDRzEvVDF6ckJqY2dkMThwVDVpczFnRllyTEFJeStuZzBjWAp2YXl6ZHNKZE9kZWQ4SXZmSFpJcnViUWVJY3owNUJlMlBheHpPMWxlZ1JuUzRKZUJuemRlMTFkQXg4QWNFc0dXCjd3QThHMXpFZUdRMU84eUhsSnRBcmlPejlNN2svOXlLVjcxelZRbEV4STErcTZRaXE3djB5OWR0VHNxbzRUMnUKTmJ6WG5WcDdDaGU2Y2JoMXNHakFVNVRyaVIydDZaQUdPVkI3bzBBMjFFd2VEL1M2Wjg4QWV5amE4dHkrVzFVMQpnSmpwN3NJRzFicFpBM29qRlJPL1F3N0NOUzBQdS9RN0lzbDJoMWdlYklGT1ovZ2QzY2MzZzhlaVROOFVUTWc2CkRVc1Bvdmx4YmZ6bUYvN0c5eDBzNmlvRU5JTEVVcHNKa1l5STBaY01uaHMrUWtLb2ozdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvakNDQW9xZ0F3SUJBZ0lVZGtlVCsvY3FnanhBVVFlbjIydGlab0RERXFzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FURUxNQWtHQTFVRUJoTUNTVTR4RHpBTkJnTlZCQWdUQmt0bGNtRnNZVEVPTUF3R0ExVUVCeE1GUzI5agphR2t4RXpBUkJnTlZCQW9UQ2t0MVltVnlibVYwWlhNeER6QU5CZ05WQkFzVEJsSnBibTk1Y3pFVE1CRUdBMVVFCkF4TUtTM1ZpWlhKdVpYUmxjekFlRncweU16QXpNamt3T1RVMU1EQmFGdzB5T0RBek1qY3dPVFUxTURCYU1Ha3gKQ3pBSkJnTlZCQVlUQWtsT01ROHdEUVlEVlFRSUV3WkxaWEpoYkdFeERqQU1CZ05WQkFjVEJVdHZZMmhwTVJNdwpFUVlEVlFRS0V3cExkV0psY201bGRHVnpNUTh3RFFZRFZRUUxFd1pTYVc1dmVYTXhFekFSQmdOVkJBTVRDa3QxClltVnlibVYwWlhNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNxSEZHTkdrMFkKWksyUVc2S2cyN3hMaURzL2ZOY0hrS3NiTmtyanRVSHRJenlURzZCb01SRGxaamh5SThTdmZQdk1mTy9CQlVPUApwck8wUUJTTk5LM2R2Zlhnd2dSY0wxcW1sT09DN1FJOG5FVmlCTkkrMjhoaU1SUjJXUldTdVdSNkhTUjNrYk1qClgyUEJqWVZGKzNHOThVbkhyM3BLU1prTG5uRkdJS2VvUFpaWHc2YWg1b0x2YmI1R1dTd3htWkhYcUFpQXpScTIKb2RFOTBmVVZPZFZpM0xnWENoOFBpcWx0NXlyV1Fac2YwZmYrb2t0WVFOUndJdVVDWkxGbHI5aUEraGpnY3lkeAptZ2VyN2hPREs4MmVqNEd0ZFE3MXpyRmc3a3ZUS3ZEVGxLdEVMYVQwVFZiR0t2VGdubWYwaG1HTDNCRGdQM3NqClk1WlEwSmxmTzVKMUFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01CMEdBMVVkRGdRV0JCVG81N2tQVldVNkp3bmlBb21BaE5KQnFTM1duVEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQWgxRGwzRDhQZzdJUlFyRmxEQkNDTHN2bEFIRjV6VXUzdmUvRFpnVEJpOVlaSjBZY2dpTkJDYTQ2CklkNTBpOHUzMEJDcVE1a1BqZGJWcnB6N1IxWEZ1eWJocU14MFpzMTRkVG1QUDlERmp1WHFnQkhhaHg0UitJcm4KclFzNEJwTkZCMUdrTHRQVUpaODBIZTNlSUllSXBGTng3YVkvNHU2MWhtM3laY2hKSUNjS1VzNlBoSi9MZ0tZRgo2WjlHY1dpNzNRRE9iaTJMdTUwd2M3WjEyV3hNZWlZMlk1S3Yxa2FvMGhUOXNLQkF1anVMT0E4YzBlcmFoYllUCnJ3QlhnbHRNcnc3SjE5TXRScks0RUZCR1IwOE9RYmxONUIxUG9Md3gxTnlaVERIYTFRK2JMazM5bWwvTEtsTkkKTHVCeWlTQ2pRa08wMVZEdjZTVDdOVC9zd1ZlcDFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://192.168.0.151:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"   # "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert" # "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"  # "/calico-secrets/etcd-key"
  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"

  # Configure the MTU to use for workload interfaces and tunnels.
  # By default, MTU is auto-detected, and explicitly setting this field should not be required.
  # You can override auto-detection by providing a non-zero value.
  veth_mtu: "0"

  # The CNI network configuration to install on each node. The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "log_file_path": "/var/log/calico/cni/cni.log",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }
---
# Source: calico/templates/calico-kube-controllers-rbac.yaml
# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # Used for creating service account tokens to be used by the CNI plugin
  - apiGroups: [""]
    resources:
      - serviceaccounts/token
    resourceNames:
      - calico-node
    verbs:
      - create
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  # EndpointSlices are used for Service-based network policy rule
  # enforcement.
  - apiGroups: ["discovery.k8s.io"]
    resources:
      - endpointslices
    verbs:
      - watch 
      - list
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
---
# Source: calico/templates/calico-kube-controllers-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---
# Source: calico/templates/calico-node-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: docker.io/calico/cni:v3.25.0
          imagePullPolicy: IfNotPresent
          command: ["/opt/cni/bin/install"]
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
        # This init container mounts the necessary filesystems needed by the BPF data plane
        # i.e. bpf at /sys/fs/bpf and cgroup2 at /run/calico/cgroup. Calico-node initialisation is executed
        # in best effort fashion, i.e. no failure for errors, to not disrupt pod creation in iptable mode.
        - name: "mount-bpffs"
          image: docker.io/calico/node:v3.25.0
          imagePullPolicy: IfNotPresent
          command: ["calico-node", "-init", "-best-effort"]
          volumeMounts:
            - mountPath: /sys/fs
              name: sys-fs
              # Bidirectional is required to ensure that the new mount we make at /sys/fs/bpf propagates to the host
              # so that it outlives the init container.
              mountPropagation: Bidirectional
            - mountPath: /var/run/calico
              name: var-run-calico
              # Bidirectional is required to ensure that the new mount we make at /run/calico/cgroup propagates to the host
              # so that it outlives the init container.
              mountPropagation: Bidirectional
            # Mount /proc/ from host which usually is an init program at /nodeproc. It's needed by mountns binary,
            # executed by calico-node, to mount root cgroup2 fs at /run/calico/cgroup to attach CTLB programs correctly.
            - mountPath: /nodeproc
              name: nodeproc
              readOnly: true
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: docker.io/calico/node:v3.25.0
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Enable or Disable VXLAN on the default IPv6 IP pool.
            - name: CALICO_IPV6POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "10.200.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/calico-node
                - -shutdown
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
            timeoutSeconds: 10
          volumeMounts:
            # For maintaining CNI plugin API credentials.
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
              readOnly: false
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: bpffs
              mountPath: /sys/fs/bpf
            - name: cni-log-dir
              mountPath: /var/log/calico/cni
              readOnly: true
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sys-fs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        - name: bpffs
          hostPath:
            path: /sys/fs/bpf
            type: Directory
        # mount /proc at /nodeproc to be used by mount-bpffs initContainer to mount root cgroup2 fs.
        - name: nodeproc
          hostPath:
            path: /proc
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used to access CNI logs.
        - name: cni-log-dir
          hostPath:
            path: /var/log/calico/cni
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: docker.io/calico/kube-controllers:v3.25.0
          imagePullPolicy: IfNotPresent
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            periodSeconds: 10
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0440
